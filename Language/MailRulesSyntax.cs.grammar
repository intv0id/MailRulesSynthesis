using MailRules.Types;
using semantics MailRules.Semantics;
language MailRules;

@start MailAction action := Rule(condition, action)

bool condition := 
    | True()
    | Id(matchingCondition)
    | And(condition, condition) 
    | Or(condition, condition) 
    | Not(condition);

bool matchingCondition := 
    | Id(receiverCondition)
    | Id(senderCondition)
    | Id(objectCondition);

bool receiverCondition := let mReceiver: Contact = message.mReceiver in
    | Is(mReceiver, constVal)
    | Contains(mReceiver, constVal)
    | StartsWith(mReceiver, constVal)
    | EndsWith(mReceiver, constVal);
    
bool senderCondition := let mSender: Contact = message.mSender in
    | Is(mSender, constVal)
    | Contains(mSender, constVal)
    | StartsWith(mSender, constVal)
    | EndsWith(mSender, constVal);
    
bool objectCondition := let mObject: string = message.mObject in
    | Is(mObject, constVal)
    | Contains(mObject, constVal)
    | StartsWith(mObject, constVal)
    | EndsWith(mObject, constVal);

// Terminal rules
string constVal;
bool constBool;

@input Message message;
    
